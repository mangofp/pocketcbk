{"version":3,"sources":["logo.svg","RecipeList.js","Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeList","useState","recipe","setRecipe","useEffect","window","fetch","method","headers","Authorization","body","JSON","stringify","query","then","response","json","data","errors","console","error","log","recipeCollection","items","className","map","r","src","picture","url","to","sys","id","name","Recipe","recipeId","useParams","documentToReactComponents","ingredients","App","match","useRouteMatch","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAAe,I,kCCmFAA,MA1Df,WAAuB,IAAD,EACQC,mBAAS,MADjB,mBACbC,EADa,KACLC,EADK,KAgCpB,OA7BAC,qBAAU,WACRC,OACGC,MADH,iEAC2E,CACvEC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAEhBC,cAAe,sDAGjBC,KAAMC,KAAKC,UAAU,CAAEC,MA3BpB,iKA6BJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,YAAuB,IAApBG,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACTA,GACFC,QAAQC,MAAMF,GAEhBC,QAAQE,IAAIJ,GAEZd,EAAUc,EAAKK,iBAAiBC,OAChCJ,QAAQE,IAAIJ,EAAKK,iBAAiBC,YAOrC,IAEErB,EAIH,qBAAKsB,UAAU,YAAf,SAEGtB,EAAOuB,KAAI,SAACC,GACV,OACG,sBAAoBF,UAAU,aAA9B,UACI,qBAAKA,UAAU,mBAAf,SACI,qBAAKG,IAAKD,EAAEE,QAAQC,QAExB,qBAAML,UAAU,kBAAhB,SACI,cAAC,IAAD,CAAMM,GAAE,kBAAaJ,EAAEK,IAAIC,IAA3B,SACCN,EAAEO,WANDP,EAAEK,IAAIC,SAPjB,e,QCQME,MA5Df,WAAmB,IAAD,EACYjC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,KAETgC,EAAYC,cAAZD,SA2CP,OAzCA/B,qBAAU,WACR,IAAMS,EAAK,yCAEKsB,EAFL,uKAYX9B,OACGC,MADH,iEAC2E,CACvEC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAEhBC,cAAe,sDAGjBC,KAAMC,KAAKC,UAAU,CAAEC,YAExBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,YAAuB,IAApBG,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACTA,GACFC,QAAQC,MAAMF,GAEhBC,QAAQE,IAAIJ,GAEZd,EAAUc,EAAKf,QACfiB,QAAQE,IAAIJ,EAAKf,aAOpB,IAEEA,EAKH,gCACE,6BAAKA,EAAO+B,OACZ,8BACCI,oCAA0BnC,EAAOoC,YAAYtB,WAPzC,eCrBEuB,MAhBf,WACE,IAAIC,EAAQC,cACZ,OACE,eAAC,IAAD,WACA,qBAAKjB,UAAU,MAAf,SACE,sDAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOkB,OAAK,EAACC,KAAI,UAAKH,EAAMX,KAA5B,SAAoC,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOc,KAAI,UAAKH,EAAMX,IAAX,qBAAX,SAA8C,cAAC,EAAD,aCZrCe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.85e18818.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\n\nconst query = `\n{recipeCollection {items {\n  sys {id},\n  contentfulMetadata {\n    tags {name}\n  }\n\tname,\n  course,\n  picture {url},\n  ingredients {json}\n}}}\n`\n\n\nfunction RecipeList() {\n  const [recipe, setRecipe] = useState(null)\n\n  useEffect(() => {\n    window\n      .fetch(`https://graphql.contentful.com/content/v1/spaces/65v4hlxp2rbo/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          // Authenticate the request\n          Authorization: \"Bearer egIOXKI2lzCStMt7p1-Quk_ogpIJJL7xR4VKQt58cdg\",\n        },\n        // send the GraphQL query\n        body: JSON.stringify({ query }),\n      })\n      .then((response) => response.json())\n      .then(({ data, errors }) => {\n        if (errors) {\n          console.error(errors);\n        }\n        console.log(data)\n        // rerender the entire component with new data\n        setRecipe(data.recipeCollection.items);\n        console.log(data.recipeCollection.items)\n        //let recipe = data.recipeCollection.items[0]\n        //const ingredients = recipe.ingredients.json.content[0]\n        //ingredients.content.forEach(element => {\n        //    console.log(element.content[0].content[0].value)\n        //});\n      });\n  }, []);\n\n  if (!recipe) {\n    return 'Loading ...'\n  }\nreturn (\n    <div className=\"container\">\n      {\n       recipe.map((r) => {\n         return (\n            <div key={r.sys.id} className=\"receipeRow\">\n                <div className=\"receipeRow-image\">\n                    <img src={r.picture.url} />\n                </div>\n                <div  className=\"receipeRow-link\">\n                    <Link to={`/recipe/${r.sys.id}`}>\n                    {r.name}\n                    </Link>\n                </div>\n            </div>\n         )\n       }) \n      }\n\n  </div>\n)\n}\n\nexport default RecipeList","import {\n    useParams\n  } from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { documentToReactComponents } from \"@contentful/rich-text-react-renderer\";\n\n  function Recipe() {\n    const [recipe, setRecipe] = useState(null)\n    const {recipeId} = useParams()\n\n    useEffect(() => {\n      const query = `\n      {\n        recipe(id: \"${recipeId}\"){\n          sys{id}\n          name\n          course\n          instructions\n          picture {url}\n          ingredients {json}\n        }\n      }\n      `\n      window\n        .fetch(`https://graphql.contentful.com/content/v1/spaces/65v4hlxp2rbo/`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            // Authenticate the request\n            Authorization: \"Bearer egIOXKI2lzCStMt7p1-Quk_ogpIJJL7xR4VKQt58cdg\",\n          },\n          // send the GraphQL query\n          body: JSON.stringify({ query }),\n        })\n        .then((response) => response.json())\n        .then(({ data, errors }) => {\n          if (errors) {\n            console.error(errors);\n          }\n          console.log(data)\n          // rerender the entire component with new data\n          setRecipe(data.recipe);\n          console.log(data.recipe)\n          //let recipe = data.recipeCollection.items[0]\n          //const ingredients = recipe.ingredients.json.content[0]\n          //ingredients.content.forEach(element => {\n          //    console.log(element.content[0].content[0].value)\n          //});\n        });\n    }, []);\n\n    if (!recipe) {\n      return 'Loading ...'\n    }\n\n    return (\n      <div>\n        <h1>{recipe.name}</h1>\n        <div>\n        {documentToReactComponents(recipe.ingredients.json)}\n        </div>\n      </div>\n\n    )\n  }\n\n  export default Recipe","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport RecipeList  from './RecipeList';\nimport Recipe from './Recipe'\nimport { matchPath } from \"react-router\";\n\nfunction App() {\n  let match = useRouteMatch();\n  return (\n    <Router>\n    <div className=\"App\">\n      <h1>My Pocket Cookbook</h1>\n    </div>\n    <Switch>\n      <Route exact path={`${match.url}`} ><RecipeList/></Route>\n      <Route path={`${match.url}/recipe/:recipeId`}><Recipe/></Route>\n    </Switch>\n    </Router>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}